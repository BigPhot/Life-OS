{"version":3,"file":"index.js","sources":["../src/preload.ts"],"sourcesContent":["// See the Electron documentation for details on how to use preload scripts:\n// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\n\nimport { contextBridge, ipcRenderer } from 'electron';\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // Example IPC methods - to be expanded later\n  openFile: () => ipcRenderer.invoke('dialog:openFile'),\n  saveFile: (data: any) => ipcRenderer.invoke('dialog:saveFile', data),\n\n  // App lifecycle methods\n  minimize: () => ipcRenderer.invoke('app:minimize'),\n  maximize: () => ipcRenderer.invoke('app:maximize'),\n  close: () => ipcRenderer.invoke('app:close'),\n\n  // Data methods - to be implemented later\n  loadData: () => ipcRenderer.invoke('data:load'),\n  saveData: (data: any) => ipcRenderer.invoke('data:save', data),\n});\n\n// Type declaration for the exposed API\ndeclare global {\n  interface Window {\n    electronAPI: {\n      openFile: () => Promise<any>;\n      saveFile: (data: any) => Promise<any>;\n      minimize: () => Promise<void>;\n      maximize: () => Promise<void>;\n      close: () => Promise<void>;\n      loadData: () => Promise<any>;\n      saveData: (data: any) => Promise<any>;\n    };\n  }\n}"],"names":["contextBridge","ipcRenderer"],"mappings":";;AAOAA,SAAAA,cAAc,kBAAkB,eAAe;AAAA;AAAA,EAE7C,UAAU,MAAMC,SAAAA,YAAY,OAAO,iBAAiB;AAAA,EACpD,UAAU,CAAC,SAAcA,SAAAA,YAAY,OAAO,mBAAmB,IAAI;AAAA;AAAA,EAGnE,UAAU,MAAMA,SAAAA,YAAY,OAAO,cAAc;AAAA,EACjD,UAAU,MAAMA,SAAAA,YAAY,OAAO,cAAc;AAAA,EACjD,OAAO,MAAMA,SAAAA,YAAY,OAAO,WAAW;AAAA;AAAA,EAG3C,UAAU,MAAMA,SAAAA,YAAY,OAAO,WAAW;AAAA,EAC9C,UAAU,CAAC,SAAcA,SAAAA,YAAY,OAAO,aAAa,IAAI;AAC/D,CAAC;"}